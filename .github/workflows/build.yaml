name: Build

on:
  push:
    branches:
      - '**'

jobs:
  build-plugin:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v4

      - name: Set up the JDK
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          server-id: github
          cache: 'maven'

      - name: Configure Problem Matchers
        run: |
          echo "::add-matcher::.github/problem-matcher.json"
          echo "::remove-matcher owner=java::"

      - name: Generate version
        id: versioning
        run: |
          VERSION=$(./version.sh patch)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build with Maven
        run: ./mvnw -Drevision=$VERSION -B --no-transfer-progress -T2C clean package

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            target/*.jar
            target/*.zip
            VERSION

      - name: Annotate run
        uses: trinodb/github-actions/action-surefire-report@b63800bedfbc7ab1ff2e5fe7eaecf5ab82ce6a70
        if: always()
        with:
          fail_if_no_tests: false
          skip_publishing: true

  build-image:
    needs: build-plugin
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: output

      - name: Read version
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ghcr
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          docker build --build-arg=VERSION=$VERSION -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:$VERSION

  create-release:
    needs: [build-plugin, build-image]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: output

      - name: Read version
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v$VERSION
          files: target/trino-k8s-$VERSION.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
